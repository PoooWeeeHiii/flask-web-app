name: Deploy Flask App to Touge Server

on:
  push:
    branches: [ main ]   # 推送到 main 自动触发
  workflow_dispatch:     # 也允许手动触发

jobs:
  test-and-deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: |
            requirements.txt
            **/requirements.txt

      - name: Install dependencies & run tests
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest==8.4.1
          pytest -v

      # ====== 从这步开始是部署 =========
      - name: Deploy to Touge Server via SSH (Port 51959)
        env:
          IP: ${{ secrets.TOUGE_SERVER_IP }}   # 例如 47.96.157.89
          PORT: 51959                          # 你的 SSH 端口号（截图确认）
        run: |
          set -euxo pipefail

          echo "🗝️ 配置 SSH 私钥"
          mkdir -p ~/.ssh
          printf "%s\n" "${{ secrets.TOUGE_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

          echo "🔎 先检测端口连通性（5秒超时）"
          timeout 5 bash -lc "cat < /dev/null > /dev/tcp/$IP/$PORT" \
            || { echo "❌ $IP:$PORT 不可达，请检查公网IP/端口/实例状态/安全组"; exit 2; }

          echo "🧾 收集主机指纹（失败不终止）"
          ssh-keyscan -p $PORT -H $IP >> ~/.ssh/known_hosts || true

          echo "🚪 尝试握手（开启详细日志）"
          ssh -vvv -o StrictHostKeyChecking=no -p $PORT root@$IP 'echo "✅ 已登录：$(whoami)@$(hostname)"; uname -a'

          echo "🚚 执行远程部署脚本"
          ssh -p $PORT -o StrictHostKeyChecking=no root@$IP <<'EOF'
            set -e
            export DEBIAN_FRONTEND=noninteractive

            # 目标目录
            APP_DIR=/root/flask-web-app
            REPO_URL="https://github.com/${GITHUB_REPOSITORY}.git"

            echo "📁 确保目录存在：$APP_DIR"
            mkdir -p "$APP_DIR"

            if [ ! -d "$APP_DIR/.git" ]; then
              echo "🧩 首次部署：克隆仓库"
              rm -rf "$APP_DIR" && mkdir -p "$APP_DIR"
              git clone "$REPO_URL" "$APP_DIR"
            else
              echo "🔄 拉取最新代码"
              cd "$APP_DIR"
              # 如果 remote 没配置或变更，强制设置为 https
              git remote set-url origin "$REPO_URL" || true
              git fetch origin
              git reset --hard origin/main
            fi

            cd "$APP_DIR"
            echo "📚 安装依赖"
            apt-get update -y
            apt-get install -y python3-pip supervisor || true
            pip3 install --upgrade pip
            pip3 install -r requirements.txt

            echo "🧩 写入 supervisor 配置（若不存在则创建）"
            CONF=/etc/supervisor/conf.d/flask-web-app.conf
            if [ ! -f "$CONF" ]; then
              cat > "$CONF" <<CONFEOF
[program:flask-web-app]
command=/usr/bin/python3 /root/flask-web-app/src/app.py
directory=/root/flask-web-app
user=root
autostart=true
autorestart=true
redirect_stderr=true
stdout_logfile=/root/flask-web-app/app.log
CONFEOF
            fi

            echo "🔁 重新加载并重启服务"
            supervisorctl reread || true
            supervisorctl update || true
            supervisorctl restart flask-web-app || supervisorctl start flask-web-app

            echo "✅ 当前状态："
            supervisorctl status flask-web-app || true

            echo "📖 最近日志（末尾20行）："
            tail -n 20 /root/flask-web-app/app.log || true
          EOF
